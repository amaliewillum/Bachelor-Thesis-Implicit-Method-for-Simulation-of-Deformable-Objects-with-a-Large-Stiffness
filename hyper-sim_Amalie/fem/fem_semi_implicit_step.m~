function [ state, conv ] = fem_semi_implicit_step(dt, state, bcon, profile)
% Copyright 2011, Kenny Erleben

%--- Assemble all vector and matrices needed ------------------------------
k    =   state.k;                        % Elastic forces
f    = [ state.fx; state.fy; state.fz];  % External forces
p    = [ state.x; state.y; state.z];     % Current spatial position
v    = [ state.vx; state.vy; state.vz];  % Current spatial velocity
M    = state.M;
C    = state.C;

%--- Get information about boundary conditions ----------------------------
V      = length( state.x );      % Number of vertices in mesh
idx    = bcon.idx;               % Get indices of boundary conditions
values = bcon.values;            % Get values of the boundary conditions              
free   = setdiff( 1:3*V, idx );  % Get indices of non-boundary conditions

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%--- Initialize 
gamma   = 0.5; beta = 0.25;
c1 = 1/(dt^2*beta);
c2 = gamma/(dt*beta);
c3 = 1;

%--- Apply boundary conditions --------------------------------------------
v(idx) = 0;
p(idx) = values;

%--- Partioning of system -------------------------------------------------
Mff = M(free,free);
Cff = C(free,free);

kf = k(free);
Ff = f(free);

Atmp    = state.M;
btmp    = state.M*v + dt*(f - k - state.C*v );

b      =  btmp(free)  - Atmp(free,idx)*v(idx);
A      =  sparse( Atmp(free,free) );

% J = 1/(dt^2*beta) * M + gamma/(dt*beta) * C + K;
% Jff = 1/(dt^2*beta) * Mff + gamma/(dt*beta) * Cff + Kff;

% y = dt*kf.*phi_p(free) - phi_v(free);

%--- Matrix_vector_product
%     Ax = c1 * Mff * x;
%     Ax = Ax + c2 * Cff * x; 
%     Ax = Ax + c3 * (Ff - kf);


final = @(x) matrix_vector_mul(x,c1,c2,c3,Mff,Cff,Ff,kf);


%--- Do velocity update ---------------------------------------------------
% v(free)    = A \ b;       % Direct method

% Use plain old conjugate gradient method
D =  sparse( diag(diag(A)) );

% n2 = length(b);
% M2 = spdiags((1:n2)',0,n2,n2);
% disp(size(M2))

if profile
  % PCG return values:  X,FLAG,RELRES,ITER,RESVEC
    [v(free), FLAG ,~,iter,conv] = pcg(final, b, [], [], D);
%     [v(free), FLAG ,~,iter,conv] = pcg(final, b, [], [], M2);
    disp([FLAG iter])
    
else
    [v(free), FLAG ,~,iter,conv] = pcg(final, b, [], [], D); 
%     [v(free), FLAG ,~,iter,conv] = pcg(final, b, [], n, M2);
    disp([FLAG iter])
    
end
conv = [];

%--- Do position update ---------------------------------------------------
p(free)    = p(free) + dt*v(free);

%--- Store the updated values in state structure --------------------------
state.vx = v(1:V);
state.vy = v(V+1:2*V);
state.vz = v(2*V+1:end);
state.x  = p(1:V);
state.y  = p(V+1:2*V);
state.z  = p(2*V+1:end);

end

